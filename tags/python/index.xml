<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Coding Blog</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on Coding Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 08 Apr 2018 08:13:42 -0700</lastBuildDate>
    
	<atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing the Belief Mapper in Python, Part 1</title>
      <link>/post/belief-mapper-python-flask-01/</link>
      <pubDate>Sun, 08 Apr 2018 08:13:42 -0700</pubDate>
      
      <guid>/post/belief-mapper-python-flask-01/</guid>
      <description>Porting Belief Mapper tool to Python and Flask
 Belief Mapper is an interactive tool for creating a visual map of a user&amp;rsquo;s beliefs. The project as it exists now is
 implemented in Ruby and Rails not actively maintained.  PyBeliefMapper is a port of this project to Python and Flask. In this blog post, we will extract the structure of the existing app and look at the steps involved in mapping the belief of a user.</description>
    </item>
    
    <item>
      <title>A TodoMVC Application using Flask-RESTPlus</title>
      <link>/post/todo-mvc-flask-restplus/</link>
      <pubDate>Sat, 31 Mar 2018 08:06:18 -0700</pubDate>
      
      <guid>/post/todo-mvc-flask-restplus/</guid>
      <description>An introduction to building REST applications using Flask-RESTPlus, Flask-SQLAlchemy
 In this blog post, I will go through the steps in building a simple ToDo application using Flask and Flask-RESTPlus. This post is based on the quickstart tutorial except we will be plugging in to PostgreSQL via Flask-SQLAlchemy. Finally, the front end will be done in Elm
Design First let&amp;rsquo;s look briefly at the design of the TodoMVC application.</description>
    </item>
    
  </channel>
</rss>